<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zzk blog</title>
  
  
  <link href="https://collapsarva.github.io/atom.xml" rel="self"/>
  
  <link href="https://collapsarva.github.io/"/>
  <updated>2024-06-08T17:03:22.013Z</updated>
  <id>https://collapsarva.github.io/</id>
  
  <author>
    <name>zzk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git及github的学习</title>
    <link href="https://collapsarva.github.io/2024/06/09/git%E5%8F%8Agithub%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://collapsarva.github.io/2024/06/09/git%E5%8F%8Agithub%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-06-08T17:00:19.000Z</published>
    <updated>2024-06-08T17:03:22.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git -v<span class="hljs-meta">#查看git版本</span><br><br>git config --<span class="hljs-keyword">global</span> user.name <span class="hljs-string">&quot;name&quot;</span><br>git config --<span class="hljs-keyword">global</span> user.email <span class="hljs-string">&quot;*******@qq.com&quot;</span><br>git <span class="hljs-keyword">init</span><br><span class="hljs-meta">#初始化用户名，邮箱</span><br><br>git <span class="hljs-keyword">add</span> ****.py<span class="hljs-meta">#添加文件</span><br>git <span class="hljs-keyword">add</span> .<span class="hljs-meta">#添加当前路径下的所有文件</span><br>git commit -m <span class="hljs-string">&quot;这次提交版本的名字（修改内容）&quot;</span><span class="hljs-meta">#将这次版本提交上去</span><br><br>git log<span class="hljs-meta">#提交记录</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h1&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="学习" scheme="https://collapsarva.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="github" scheme="https://collapsarva.github.io/tags/github/"/>
    
    <category term="blog" scheme="https://collapsarva.github.io/tags/blog/"/>
    
    <category term="git" scheme="https://collapsarva.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>PointRCNN环境搭建及部署</title>
    <link href="https://collapsarva.github.io/2023/11/12/PointRCNN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E7%BD%B2/"/>
    <id>https://collapsarva.github.io/2023/11/12/PointRCNN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E7%BD%B2/</id>
    <published>2023-11-12T13:25:31.000Z</published>
    <updated>2024-06-08T16:44:09.700Z</updated>
    
    <content type="html"><![CDATA[<p>算法地址：<a href="https://github.com/sshaoshuai/PointRCNN">PointRCNN</a></p><h1 id="1-数据集（KITTI）准备"><a href="#1-数据集（KITTI）准备" class="headerlink" title="1.数据集（KITTI）准备"></a>1.数据集（KITTI）准备</h1><p>官网地址：<a href="http://www.cvlibs.net/datasets/kitti/eval_object.php?obj_benchmark=3d">KITTI数据集官网</a></p><h2 id="数据集结构"><a href="#数据集结构" class="headerlink" title="数据集结构"></a>数据集结构</h2><p><img src="/2023/11/12/PointRCNN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E7%BD%B2/1.jpg" alt="1"></p><h1 id="2-环境部署"><a href="#2-环境部署" class="headerlink" title="2.环境部署"></a>2.环境部署</h1><h2 id="a-环境概览"><a href="#a-环境概览" class="headerlink" title="a.环境概览"></a>a.环境概览</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> <span class="hljs-number">3</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">cuda</span> <span class="hljs-number">10</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">gcc</span> &lt;=<span class="hljs-number">7</span><br><span class="hljs-attribute">pytorch</span>==<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">torchvision</span>==<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="b-创建虚拟环境并激活"><a href="#b-创建虚拟环境并激活" class="headerlink" title="b.创建虚拟环境并激活"></a>b.创建虚拟环境并激活</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">conda</span> create -n pointRCNN python=<span class="hljs-number">3</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">conda</span> activate pointRCNN<br></code></pre></td></tr></table></figure><p>下载源代码：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">--recursive</span> https://github.com/sshaoshuai/PointRCNN.git<br></code></pre></td></tr></table></figure><h2 id="c-安装cuda10-0"><a href="#c-安装cuda10-0" class="headerlink" title="c.安装cuda10.0"></a>c.安装cuda10.0</h2><p>具体参考我这篇博客<a href="https://collapsarva.github.io/2023/10/27/Yolov4%E7%AE%97%E6%B3%95%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%89/">Yolov4算法部署及环境搭建（服务器上）</a></p><p>在安装老版本的cuda时，会有一些注意事项（特别时安装时的一些注意事项）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#是否安装显卡驱动包，这里注意由于我已经安装了新版显卡驱动，所以选择n，如果你是首次安装选择y</span><br><br>Install NVIDIA Accelerated Graphics Driver <span class="hljs-keyword">for</span> Linux-x86_64 <span class="hljs-number">384.81</span>?<br>y)es<span class="hljs-regexp">/(n)o/</span>(q)uit: n<br><br><br><span class="hljs-comment">#添加symbolic link链接 **注意这个连接，如果你之前安装过另一个版本的cuda，除非你确定想要用这个新版本的cuda，否则为了不影响目前服务器系统环境这里就选no。因为指定该链接后，服务器系统将会把默认使用的cuda指向这个新安装的版本** 如果你是首次安装可以选择yes。由于我这里安装过cuda版本，所以选择no</span><br><br>Do you want to install a symbolic link at <span class="hljs-regexp">/usr/</span>local/cuda?<br>(y)es<span class="hljs-regexp">/(n)o/</span>(q)uit: n<br><br>详细细节可以参考原文链接：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/sinat_30545761/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">107709468</span>/<br></code></pre></td></tr></table></figure><h2 id="d-安装pytorch1-0-0并配置依赖环境"><a href="#d-安装pytorch1-0-0并配置依赖环境" class="headerlink" title="d.安装pytorch1.0.0并配置依赖环境"></a>d.安装pytorch1.0.0并配置依赖环境</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pip <span class="hljs-keyword">install </span>easydict<br>pip <span class="hljs-keyword">install </span>tqdm<br>pip <span class="hljs-keyword">install </span>tensorboardX <br>pip <span class="hljs-keyword">install </span>fire<br>pip <span class="hljs-keyword">install </span>numba<br>pip <span class="hljs-keyword">install </span>pyyaml<br>pip <span class="hljs-keyword">install </span><span class="hljs-keyword">scikit-image </span><br>pip <span class="hljs-keyword">install </span><span class="hljs-keyword">shapely</span><br><span class="hljs-keyword"></span><br>conda <span class="hljs-keyword">install </span>pytorch==<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> torchvision==<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> cuda100 -c pytorch<br><br></code></pre></td></tr></table></figure><p>在运行最后一步时可能会出现如下报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">Collecting package metadata (current_repodata.json): done<br><br>Solving environment: failed <span class="hljs-keyword">with</span> <span class="hljs-keyword">initial</span> frozen solve. Retrying <span class="hljs-keyword">with</span> flexible solve.<br>PackagesNotFoundError: The following packages <span class="hljs-keyword">are</span> <span class="hljs-keyword">not</span> available <span class="hljs-keyword">from</span> <span class="hljs-keyword">current</span> channels:<br><br>  <span class="hljs-operator">-</span> pytorch<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>解决问题的方法有如下可以参考：</p><p> 1).增加清华源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/msys2/</span><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/conda-forge/</span><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span><br>conda config --set show_channel_urls yes<br><br>conda update --all<br></code></pre></td></tr></table></figure><p>并未解决</p><p> 2).手动安装，将torch和torchvision分别安装。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install https://download.pytorch.org/whl/cu100/torch-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-cp36-cp36m-linux_x86_64.whl<br><br><span class="hljs-comment">#torch下载网站https://blog.csdn.net/anananajiushiwo/article/details/123741754</span><br><span class="hljs-comment">#在该网站中下载想对应的torchvision</span><br><span class="hljs-comment">#https://pypi.tuna.tsinghua.edu.cn/simple/torchvision/</span><br><br><span class="hljs-attribute">pip</span> install torchvision-<span class="hljs-number">0</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>-py2.py3-none-any.whl<br></code></pre></td></tr></table></figure><h2 id="e-安装gcc-7-2-0"><a href="#e-安装gcc-7-2-0" class="headerlink" title="e.安装gcc(7.2.0)"></a>e.安装gcc(7.2.0)</h2><p>gcc各版本下载： <a href="https://link.zhihu.com/?target=http://ftp.gnu.org/gnu/gcc/">http:&#x2F;&#x2F;<strong>ftp.gnu.org&#x2F;gnu&#x2F;gcc&#x2F;</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://ftp.gnu.org/gnu/gcc/gcc-7.2.0/gcc-7.2.0.tar.gz<br>tar -zxvf gcc-7.2.0.tar.gz<br><br><span class="hljs-built_in">cd</span> gcc-7.2.0/<br>./contrib/download_prerequisites<br><br>./configure --prefix=/space2/zhangzk/GCC --enable-languages=c,c++ --disable-multilib<br>make -j16 &amp;&amp; sudo make install<br><br></code></pre></td></tr></table></figure><p>不出意料，编译会出现很多问题，如下：</p><h6 id="1-sanitizer-platform-limits-posix-cc-158-23-致命错误：-sys-ustat-h：没有那个文件或目录"><a href="#1-sanitizer-platform-limits-posix-cc-158-23-致命错误：-sys-ustat-h：没有那个文件或目录" class="headerlink" title="1).sanitizer_platform_limits_posix.cc:158:23: 致命错误： sys&#x2F;ustat.h：没有那个文件或目录"></a>1).sanitizer_platform_limits_posix.cc:158:23: 致命错误： sys&#x2F;ustat.h：没有那个文件或目录</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/./</span>libsanitizer<span class="hljs-regexp">/sanitizer_common/</span>sanitizer_platform_limits_posix.cc:<span class="hljs-number">158</span>:<span class="hljs-number">23</span>: 致命错误： sys/ustat.h：没有那个文件或目录<br> <span class="hljs-comment">#include &lt;sys/ustat.h&gt;</span><br></code></pre></td></tr></table></figure><p>解决：</p><ul><li><p>首先将gcc-7.2.0&#x2F;libsanitizer&#x2F;sanitizer_common&#x2F;sanitizer_platform_limits_posix.cc中的这一行#include &lt;sys&#x2F;ustat.h&gt;中注释或者删除。</p></li><li><p>大约在250行左右插入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Use pre-computed size of struct ustat to avoid &lt;sys/ustat.h&gt; which</span><br>  <span class="hljs-comment">// has been removed from glibc 2.28.</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__aarch64__) || defined(__s390x__) || defined (__mips64) \</span><br><span class="hljs-meta">  || defined(__powerpc64__) || defined(__arch64__) || defined(__sparcv9) \</span><br><span class="hljs-meta">  || defined(__x86_64__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZEOF_STRUCT_USTAT 32</span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(__arm__) || defined(__i386__) || defined(__mips__) \</span><br><span class="hljs-meta">  || defined(__powerpc__) || defined(__s390__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZEOF_STRUCT_USTAT 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">error</span> Unknown size of struct ustat</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-type">unsigned</span> struct_ustat_sz = SIZEOF_STRUCT_USTAT;<br></code></pre></td></tr></table></figure><p><img src="/2023/11/12/PointRCNN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%83%A8%E7%BD%B2/2.jpg" alt="2"></p></li></ul><h6 id="2"><a href="#2" class="headerlink" title="2)."></a>2).</h6><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>size of array ‘assertion_failed__1150’ is negative  <br>typedef char IMPL_PASTE(assertion_failed_##_, line)[2*(int)(pred)<span class="hljs-string">-1</span>]<br></code></pre></td></tr></table></figure><p>我们需要根据这个补丁改一下gcc7.2.0的代码：<a href="https://github.com/spack/spack/commit/6fb6b28d51f50287ac1c399c639caa7c4e2914cc">gcc: Fix error &#39;size of array is negative&#39; (#16968) · spack&#x2F;spack@6fb6b28 (github.com)</a></p><h6 id="3-其他问题参考（本人没遇到）"><a href="#3-其他问题参考（本人没遇到）" class="headerlink" title="3).其他问题参考（本人没遇到）"></a>3).其他问题参考（本人没遇到）</h6><p><a href="https://zhuanlan.zhihu.com/p/662657371">从源码构建gcc扫雷笔记 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/weixin_44908950/article/details/125547836">ubuntu 20.04LST跌跌撞撞安装编译gcc6.3.0_狂躁脑电波的博客-CSDN博客</a></p><p>编译成功后，配置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/space2/zhangzk/GCC/bin:/space2/zhangzk/GCC/lib64:<span class="hljs-variable">$PATH</span>     <span class="hljs-comment">#gcc-7.2.0</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/space2/zhangzk/GCC/lib/:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><br></code></pre></td></tr></table></figure><h2 id="f-安装依赖pointnet2，iou3d，roipool3d"><a href="#f-安装依赖pointnet2，iou3d，roipool3d" class="headerlink" title="f.安装依赖pointnet2，iou3d，roipool3d"></a>f.安装依赖pointnet2，iou3d，roipool3d</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span> build_and_install.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/weixin_45273638/article/details/129014899">服务器运行PointRCNN代码全过程记录_今天也想干嘛呢的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;算法地址：&lt;a href=&quot;https://github.com/sshaoshuai/PointRCNN&quot;&gt;PointRCNN&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-数据集（KITTI）准备&quot;&gt;&lt;a href=&quot;#1-数据集（KITTI）准备&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="学习" scheme="https://collapsarva.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="hexo" scheme="https://collapsarva.github.io/tags/hexo/"/>
    
    <category term="github" scheme="https://collapsarva.github.io/tags/github/"/>
    
    <category term="blog" scheme="https://collapsarva.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>docker的学习与使用</title>
    <link href="https://collapsarva.github.io/2023/10/30/docker%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://collapsarva.github.io/2023/10/30/docker%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2023-10-30T00:39:35.000Z</published>
    <updated>2023-11-27T08:19:30.803Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/P_LarT/article/details/107768318">Ubuntu上学习使用Docker的详细入门教程</a></p><h1 id="1-镜像（image）与容器（container）"><a href="#1-镜像（image）与容器（container）" class="headerlink" title="1.镜像（image）与容器（container）"></a>1.镜像（image）与容器（container）</h1><p>就我个人的理解，镜像与容器的关系就类似与类与实例的关系。镜像是用来创建容器的，是容器的只读模板。在实际使用中，使用镜像创建容器，容器在linux上本地运行，并与其他容器共享主机的内核。它运行一个独立的进程，占用的内存不超过任何其他可执行文件，体现其轻量级的特点。</p><h1 id="2-获取镜像"><a href="#2-获取镜像" class="headerlink" title="2.获取镜像"></a>2.获取镜像</h1><p>获取镜像主要有两种方式，一种是使用他人打包好，并通过网络（主要是docker官方的docker hub和一些类似的镜像托管网站）进行分享的镜像，一种则是在本地将镜像保存为本地文件，直接使用生成的文件进行共享。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>主要借助两条指令。<code>docker pull</code>和 <code>docker run</code></p><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">docker pull [<span class="hljs-title class_">OPTIONS</span>] <span class="hljs-title class_">NAME</span>[<span class="hljs-symbol">:TAG|</span><span class="hljs-variable">@DIGEST</span>]<br></code></pre></td></tr></table></figure><p>我们先关注NAME和紧跟的两个互斥的配置项。这里给出三种不同的拉取方式。</p><ul><li><p>NAME</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull ubtuntu<br>如果不指定标签，Docker Engine会使用：latest作为默认标签拉取镜像。<br></code></pre></td></tr></table></figure></li><li><p>NAME:TAG</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull ubuntu:<span class="hljs-number">14</span>.<span class="hljs-number">04</span><br></code></pre></td></tr></table></figure></li><li><p>NAME@DIGEST</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">docker pull ubuntu<span class="hljs-title">@sha256</span>:<span class="hljs-number">45</span>b<span class="hljs-number">23</span>dee<span class="hljs-number">08</span>af<span class="hljs-number">5e43</span>a<span class="hljs-number">7</span>fea<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>cf<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">25</span>ccf<span class="hljs-number">269</span>ee<span class="hljs-number">113168</span><span class="hljs-keyword">c</span><span class="hljs-number">19722</span>f<span class="hljs-number">87876677</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span>cb<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>这个为我们提供了一种指定特定版本镜像的方法。</li><li>为了保证后期我们仅仅使用这个版本的镜像，我们可以重新通过指定DIGEST（通过查看镜像托管网站里的镜像信息或者是之前的 <code>pull</code> 输出里的DIGEST信息）的方式 <code>pull</code> 该版本镜像。</li></ul></li></ul><p>更多详见：</p><ul><li><a href="https://docs.docker.com/engine/reference/commandline/pull/#pull-an-image-by-digest-immutable-identifier">https://docs.docker.com/engine/reference/commandline/pull/#pull-an-image-by-digest-immutable-identifier</a></li><li>通过API获取镜像仓库里镜像的标签：<a href="https://www.jianshu.com/p/a5af4f558b0a">https://www.jianshu.com/p/a5af4f558b0a</a></li></ul><h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><p>该指令可以直接拉取本地不存在的镜像，并且创建一个容器。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sudo docker <span class="hljs-built_in">run</span> hello-<span class="hljs-built_in">word</span><br></code></pre></td></tr></table></figure><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><h3 id="docker-load"><a href="#docker-load" class="headerlink" title="docker load"></a>docker load</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">docker <span class="hljs-keyword">load</span> [<span class="hljs-keyword">OPTIONS</span>]<br></code></pre></td></tr></table></figure><h2 id="显示镜像"><a href="#显示镜像" class="headerlink" title="显示镜像"></a>显示镜像</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo docker images</span><br></code></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><h2 id="生成镜像"><a href="#生成镜像" class="headerlink" title="生成镜像"></a>生成镜像</h2><p>主要包含两种方式，一种是基于构建文件Dockerfile和 <code>docker build</code> 的自动构建，一种是基于 <code>docker commit</code> 提交对于现有容器的修改之后生成镜像。</p><h3 id="docker-build"><a href="#docker-build" class="headerlink" title="docker build"></a>docker build</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">docker build [OPTIONS] PATH |<span class="hljs-string"> URL </span>|<span class="hljs-string"> -</span><br></code></pre></td></tr></table></figure><p>细节参考：<a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a></p><p>对于已有的Dockerfile文件，我们可以使用如下指令生成镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t vieux/apache:2.0 .</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用<span class="hljs-string">&#x27;.&#x27;</span>目录下的Dockerfile文件。注意结尾的路径`.`，这里给打包的镜像指定了TAG</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t whenry/fedora-jboss:latest -t whenry/fedora-jboss:v2.1 .</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">也可以指定多个TAG</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -f dockerfiles/Dockerfile.debug -t myapp_debug .</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">也可以不使用<span class="hljs-string">&#x27;.&#x27;</span>目录下的Dockerfile文件，而是使用-f指定文件</span><br></code></pre></td></tr></table></figure><p>这样我们就可以在 <code>docker images</code>中看到生成的镜像了。</p><h3 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">docker commit <span class="hljs-comment">[OPTIONS]</span> <span class="hljs-keyword">CONTAINER</span> <span class="hljs-comment">[REPOSITORY<span class="hljs-comment">[:TAG]</span>]</span><br></code></pre></td></tr></table></figure><h1 id="3-使用镜像（创建容器）"><a href="#3-使用镜像（创建容器）" class="headerlink" title="3.使用镜像（创建容器）"></a>3.使用镜像（创建容器）</h1><h2 id="docker-run-1"><a href="#docker-run-1" class="headerlink" title="docker run"></a>docker run</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker run <span class="hljs-selector-attr">[OPTIONS]</span> IMAGE <span class="hljs-selector-attr">[COMMAND]</span> <span class="hljs-selector-attr">[ARG...]</span><br><br>例：<br>docker run -it <span class="hljs-attr">--name</span> <span class="hljs-selector-attr">[name]</span> <span class="hljs-attr">--privileged</span>=true <span class="hljs-attr">--network</span> host -v <span class="hljs-selector-attr">[host地址]</span>:<span class="hljs-selector-attr">[容器地址]</span> <span class="hljs-selector-attr">[images]</span> /bin/bash<br></code></pre></td></tr></table></figure><ul><li>-i和-t：为docker创建一个伪终断</li><li>&#x2F;bin&#x2F;bash: 表示载入容器后运行bash，为docker容器创建一个进程的运行，避免kill itself</li><li><code>-v</code> 表示将本地的文件夹以只读（ <code>:ro</code> ，读写可以写为 <code>:rw</code> ，如果不加，则默认的方式是读写）的方式挂载到容器中的 <code>/tcdata</code> 目录中。</li><li>更多的参数可以参考该网址：<a href="https://docs.docker.com/engine/reference/run/#detached-vs-foreground">https://docs.docker.com/engine/reference/run/#detached-vs-foreground</a></li></ul><h2 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo docker ps -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> docker start<span class="hljs-meta"> [container]</span><br><span class="hljs-comment">#重启</span><br><span class="hljs-attribute">sudo</span> docker restart<span class="hljs-meta"> [container]</span><br></code></pre></td></tr></table></figure><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>可以用 <code>attach</code>和 <code>exec</code>进入容器，但是更推荐后者，因为 <code>exec</code>退出后不会把容器关闭</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">sudo docker <span class="hljs-keyword">exec</span> -it [<span class="hljs-keyword">container</span>] bash<br></code></pre></td></tr></table></figure><h2 id="停止、退出和删除容器"><a href="#停止、退出和删除容器" class="headerlink" title="停止、退出和删除容器"></a>停止、退出和删除容器</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#停止容器</span><br>docker stop [container]<br><span class="hljs-comment">#退出容器</span><br><span class="hljs-keyword">exit</span><br><span class="hljs-comment">#删除容器 可以移除一个容器或者多个容器</span><br>docker rm [OPTIONS] CONTAINER [CONTAINER...]<br></code></pre></td></tr></table></figure><h2 id="从本机与容器中互相拷贝数据"><a href="#从本机与容器中互相拷贝数据" class="headerlink" title="从本机与容器中互相拷贝数据"></a>从本机与容器中互相拷贝数据</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">docker cp <span class="hljs-comment">[OPTIONS]</span> <span class="hljs-keyword">CONTAINER</span>:SRC_PATH DEST_PATH|-<br>docker cp <span class="hljs-comment">[OPTIONS]</span> SRC_PATH|- <span class="hljs-keyword">CONTAINER</span>:DEST_PATH<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/P_LarT/article/details/107768318&quot;&gt;Ubuntu上学习使用Docker的详细入门教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-镜像（image）与容器（container）&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="学习" scheme="https://collapsarva.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="blog" scheme="https://collapsarva.github.io/tags/blog/"/>
    
    <category term="docker" scheme="https://collapsarva.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Yolov4算法部署及环境搭建（服务器上）</title>
    <link href="https://collapsarva.github.io/2023/10/27/Yolov4%E7%AE%97%E6%B3%95%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%89/"/>
    <id>https://collapsarva.github.io/2023/10/27/Yolov4%E7%AE%97%E6%B3%95%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%89/</id>
    <published>2023-10-27T15:27:26.000Z</published>
    <updated>2023-11-13T08:42:07.628Z</updated>
    
    <content type="html"><![CDATA[<p>算法网址： <a href="https://github.com/maudzung/Complex-YOLOv4-Pytorch">Yolov4</a></p><h1 id="1-服务器环境部署"><a href="#1-服务器环境部署" class="headerlink" title="1.服务器环境部署"></a>1.服务器环境部署</h1><p>首先将kitti数据集下载下来，并且将数据集结构整理如下：</p><p><img src="/2023/10/27/Yolov4%E7%AE%97%E6%B3%95%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%89/1.png" alt="1"></p><p>可以使用scp命令将服务器上的数据集下载下来：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">scp</span> -r -P <span class="hljs-number">10200</span> user<span class="hljs-variable">@ip</span>:目标文件  安装文件<br></code></pre></td></tr></table></figure><h1 id="2-环境部署"><a href="#2-环境部署" class="headerlink" title="2.环境部署"></a>2.环境部署</h1><p>环境部署比较重要，避免出现一些难以修改的错误。原部署环境如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">cuda10</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>如果cuda版本不一致，参考 <a href="https://zhuanlan.zhihu.com/p/581634820?utm_id=0">创建多个cuda版本，可自由切换，不干扰源环境，且不用sudo指令，操作简单</a></p><p>在较高ubuntu版本安装cuda时可能会出现如下bug，这是由于gcc版本不匹配。一般简易解决方法是忽略，使用 –override 参数。</p><p>参考 <a href="https://blog.csdn.net/aizsa111/article/details/129455363">ubuntu22.10安装cuda出错Failed to verify gcc version. See log at &#x2F;var&#x2F;log&#x2F;cuda-installer.log for details.</a></p><p>然后安装相应的依赖包：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> -r requirements.txt<br></code></pre></td></tr></table></figure><h1 id="3-部署算法"><a href="#3-部署算法" class="headerlink" title="3.部署算法"></a>3.部署算法</h1><h2 id="a-下载预训练参数，放网盘里"><a href="#a-下载预训练参数，放网盘里" class="headerlink" title="a.下载预训练参数，放网盘里"></a>a.下载预训练参数，放网盘里</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">链接：https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>__b6UxpkoXOZ727bifQefA 提取码：uxx4<br></code></pre></td></tr></table></figure><p>将下载的文件夹放入新建的文件夹（Complex-YOLOv4-Pytorch-master&#x2F;checkpoint&#x2F;complex_yolov4)里</p><p>采用多个GPU训练：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python train<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--dist-url</span> <span class="hljs-string">&#x27;tcp://127.0.0.1:29500&#x27;</span> <span class="hljs-attr">--dist-backend</span> <span class="hljs-string">&#x27;nccl&#x27;</span> <span class="hljs-attr">--multiprocessing-distributed</span> <span class="hljs-attr">--world-size</span> <span class="hljs-number">1</span> <span class="hljs-attr">--rank</span> <span class="hljs-number">0</span> <span class="hljs-attr">--pretrained_path</span> ../checkpoints/complex_yolov4/complex_yolov4_mse_loss<span class="hljs-selector-class">.pth</span><br><br></code></pre></td></tr></table></figure><p>主要参考网站：</p><p><a href="https://blog.csdn.net/qq_45275571/article/details/123881921">complex-YOLOv4（三）：测试和评估作者训练好的模型以及训练模型</a></p><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">安装指定的cuda版本</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;算法网址： &lt;a href=&quot;https://github.com/maudzung/Complex-YOLOv4-Pytorch&quot;&gt;Yolov4&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-服务器环境部署&quot;&gt;&lt;a href=&quot;#1-服务器环境部署&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="学习" scheme="https://collapsarva.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="blog" scheme="https://collapsarva.github.io/tags/blog/"/>
    
    <category term="Yolov4" scheme="https://collapsarva.github.io/tags/Yolov4/"/>
    
  </entry>
  
  <entry>
    <title>hexo的搭建以及bug合集</title>
    <link href="https://collapsarva.github.io/2023/10/25/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8Abug%E5%90%88%E9%9B%86/"/>
    <id>https://collapsarva.github.io/2023/10/25/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8Abug%E5%90%88%E9%9B%86/</id>
    <published>2023-10-25T08:16:31.000Z</published>
    <updated>2023-10-25T15:50:53.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-使用hexo、github来搭建个人博客"><a href="#1-使用hexo、github来搭建个人博客" class="headerlink" title="1.使用hexo、github来搭建个人博客"></a>1.使用hexo、github来搭建个人博客</h1><p>搭建流程主要参考以下文章（流程非常详细）</p><p><a href="https://www.bilibili.com/read/cv12633102/">2021最全hexo搭建博客+matery美化+使用（保姆级教程）链接1</a></p><hr><h1 id="2-遇到的一些bug及解决方法（下列步骤均指上述文章）"><a href="#2-遇到的一些bug及解决方法（下列步骤均指上述文章）" class="headerlink" title="2.遇到的一些bug及解决方法（下列步骤均指上述文章）"></a>2.遇到的一些bug及解决方法（下列步骤均指上述文章）</h1><h2 id="a-步骤4-2的最后一步，无法通过域名（xxxx-github-io）访问到博客页面，出现如下问题："><a href="#a-步骤4-2的最后一步，无法通过域名（xxxx-github-io）访问到博客页面，出现如下问题：" class="headerlink" title="a.步骤4.2的最后一步，无法通过域名（xxxx.github.io）访问到博客页面，出现如下问题："></a>a.步骤4.2的最后一步，无法通过域名（xxxx.github.io）访问到博客页面，出现如下问题：</h2><p><img src="/2023/10/25/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8Abug%E5%90%88%E9%9B%86/1.png" alt="1"></p><p>这是由于在github上创建仓库时的命名必须是你github的用户名，不能随意其一个名字。否则访问不上。</p><p>参考 <a href="https://blog.csdn.net/dajian790626/article/details/78595684">hexo搭建Github博客上传后，网页显示404问题解决方案</a></p><h3 id="b-在更换主题后，博客页面空白，并出现一串英文"><a href="#b-在更换主题后，博客页面空白，并出现一串英文" class="headerlink" title="b.在更换主题后，博客页面空白，并出现一串英文"></a>b.在更换主题后，博客页面空白，并出现一串英文</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">extends</span> <span class="hljs-keyword">includes</span><span class="hljs-regexp">/layout.pug block content #recent-posts.recent-posts include includes/</span>recent-posts.pug <span class="hljs-keyword">include</span> <span class="hljs-keyword">includes</span>/pagination.pug<br></code></pre></td></tr></table></figure><p>解决办法：</p><ul><li>在hexo目录下打开git bash，输入命令：</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>--save hexo-renderer-<span class="hljs-keyword">jade </span>hexo-generator-feed hexo-generator-sitemap hexo-<span class="hljs-keyword">browsersync </span>hexo-generator-archive<br></code></pre></td></tr></table></figure><ul><li>重新上传</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><h3 id="c-图片上传不了，出现如下问题："><a href="#c-图片上传不了，出现如下问题：" class="headerlink" title="c.图片上传不了，出现如下问题："></a>c.图片上传不了，出现如下问题：</h3><p><img src="/2023/10/25/hexo%E7%9A%84%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8Abug%E5%90%88%E9%9B%86/2.jpg" alt="2"></p><p>解决方法：</p><p>将<strong>config.yml</strong>文件中的<strong>post_asset_folder</strong> 选项设为  <strong>true</strong> ，这时我们使用</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;xxx&quot;</span>  //hexo <span class="hljs-keyword">new</span> <span class="hljs-symbol">&#x27;hexo</span>&#x27;<br></code></pre></td></tr></table></figure><p>可以发现在sourece文件夹的_posts中出现一个 <code>xxx.md</code>和一个同名的文件夹 <code>xxx</code>，将需要插入md文本的图片放在该同名文件夹中，插入图片时，修改图片路径， <strong>注意</strong> ！！！</p><p><strong>只保留文件名，其他一律删除！！！</strong> 如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">!<span class="hljs-selector-attr">[图片名称]</span>（图片名称<span class="hljs-selector-class">.png</span>）<br></code></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/weixin_60094035/article/details/128769457?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169824469716800222830866%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169824469716800222830866&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-128769457-null-null.142%5Ev96%5Epc_search_result_base3&utm_term=Hexo%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87&spm=1018.2226.3001.4187">HEXO博客解决图片无法显示问题</a></p><p><a href="https://hexo.io/zh-cn/docs/asset-folders.html">hexo官方文档</a></p><hr><h1 id="使用vscode编辑markdown文件"><a href="#使用vscode编辑markdown文件" class="headerlink" title="使用vscode编辑markdown文件"></a>使用vscode编辑markdown文件</h1><p>可以在vscode中使用**Office Viewer(Markdown Editor)**插件进行编辑（强烈推荐）</p><p>除此之外也可以在命令行输入<strong>Markdown:Open Preview to the Side</strong>打开侧边预览。具体使用方法可以参考以下网页</p><p><a href="https://www.cnblogs.com/shawWey/p/8931697.html">vscode使用markdown文档编写</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-使用hexo、github来搭建个人博客&quot;&gt;&lt;a href=&quot;#1-使用hexo、github来搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;1.使用hexo、github来搭建个人博客&quot;&gt;&lt;/a&gt;1.使用hexo、github来搭建个人</summary>
      
    
    
    
    <category term="学习" scheme="https://collapsarva.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="hexo" scheme="https://collapsarva.github.io/tags/hexo/"/>
    
    <category term="github" scheme="https://collapsarva.github.io/tags/github/"/>
    
    <category term="blog" scheme="https://collapsarva.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://collapsarva.github.io/2023/10/24/hello-world/"/>
    <id>https://collapsarva.github.io/2023/10/24/hello-world/</id>
    <published>2023-10-24T14:07:28.834Z</published>
    <updated>2023-10-24T14:07:28.834Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
